export default async (request, context) => {
  const { searchParams } = new URL(request.url);

  // ────────────────────────────────────────────────────────────
  // 1. Parameters
  // ────────────────────────────────────────────────────────────
  let path = searchParams.get("path");
  const redirectPath = searchParams.get("redirectpath");
  const ownerEmail = searchParams.get("owner");
  let expireTime = searchParams.get("expires");
  const once = searchParams.get("once") === "true";
  const password = searchParams.get("password");

  // New features
  const adminPass = searchParams.get("adminpass");
  const dbBase = searchParams.get("database");
  const deleteFlag = searchParams.has("delete") || searchParams.get("delete") === "true";

  // ────────────────────────────────────────────────────────────
  // 2. Database helpers
  // ────────────────────────────────────────────────────────────
  const DEFAULT_DB_ROOT = "https://marko-be9a9-default-rtdb.firebaseio.com/shortlink/";
  const dbRoot = dbBase ? (dbBase.endsWith("/") ? dbBase : dbBase + "/") : DEFAULT_DB_ROOT;
  const buildUrl = (p) => `${dbRoot}${p}.json`;

  const generateRandomPath = () => Math.random().toString(36).substr(2, 7);

  // If this is a DELETE request, a path is mandatory and should not be autogenerated
  if (deleteFlag && !path) {
    return new Response(
      JSON.stringify({
        error: "Missing parameter",
        message: "`path` is required when using the delete option."
      }),
      { status: 400, headers: { "Content-Type": "application/json" } }
    );
  }

  // Only auto‑generate path when creating
  if (!deleteFlag && !path) path = generateRandomPath();

  if (!expireTime) {
    const d = new Date();
    d.setFullYear(d.getFullYear() + 5);
    d.setHours(23, 59, 59, 999);
    expireTime = d.toISOString();
  }

  let dbUrl = buildUrl(path);

  try {
    const res = await fetch(dbUrl);
    const existing = await res.json();

    // ──────────────────────────────────────────────────────────
    // 3. DELETE FLOW
    // ──────────────────────────────────────────────────────────
    if (deleteFlag) {
      if (!existing || !existing.redirectPath) {
        return new Response(
          JSON.stringify({
            error: "Not found",
            message: "Shortlink does not exist."
          }),
          { status: 404, headers: { "Content-Type": "application/json" } }
        );
      }
      if (!adminPass || adminPass !== existing.adminpass) {
        return new Response(
          JSON.stringify({
            error: "Forbidden",
            message: "Admin password is missing or incorrect."
          }),
          { status: 403, headers: { "Content-Type": "application/json" } }
        );
      }

      const delResp = await fetch(dbUrl, { method: "DELETE" });
      if (!delResp.ok) throw new Error("Failed to delete entry from database.");

      return new Response(
        JSON.stringify({
          path,
          message: `Successfully deleted shortlink \"${path}\".`
        }),
        { status: 200, headers: { "Content-Type": "application/json" } }
      );
    }

    // ──────────────────────────────────────────────────────────
    // 4. UPDATE FLOW (entry exists & adminPass matches)
    // ──────────────────────────────────────────────────────────
    if (existing && existing.redirectPath) {
      if (adminPass && adminPass === existing.adminpass) {
        if (!redirectPath) {
          return new Response(
            JSON.stringify({
              error: "Missing parameter",
              message: "`redirectpath` is required when updating an existing shortlink."
            }),
            { status: 400, headers: { "Content-Type": "application/json" } }
          );
        }

        existing.redirectPath = redirectPath;
        if (expireTime) existing.expires = expireTime;
        existing.updatedAt = new Date().toISOString();
        const updResp = await fetch(dbUrl, {
          method: "PUT",
          body: JSON.stringify(existing),
          headers: { "Content-Type": "application/json" }
        });
        if (!updResp.ok) throw new Error("Failed to update entry in database.");

        return new Response(
          JSON.stringify({
            path,
            redirectPath: existing.redirectPath,
            expires: existing.expires,
            message: `Successfully updated shortlink \"${path}\".`
          }),
          { status: 200, headers: { "Content-Type": "application/json" } }
        );
      }

      return new Response(
        JSON.stringify({
          error: "Path already exists or admin password incorrect.",
          message: "Cannot create/update because the path is already in use."
        }),
        { status: 409, headers: { "Content-Type": "application/json" } }
      );
    }

    // ──────────────────────────────────────────────────────────
    // 5. CREATE FLOW (new entry)
    // ──────────────────────────────────────────────────────────
    if (!redirectPath || !ownerEmail) {
      return new Response(
        JSON.stringify({
          error: "Missing required query parameters.",
          message: "Please provide `redirectpath` and `owner` when creating a new shortlink."
        }),
        { status: 400, headers: { "Content-Type": "application/json" } }
      );
    }

    // Ensure unique path
    let _existing = existing;
    while (_existing && _existing.redirectPath) {
      path = generateRandomPath();
      dbUrl = buildUrl(path);
      const r = await fetch(dbUrl);
      _existing = await r.json();
    }

    const data = {
      redirectPath,
      owner: ownerEmail,
      expires: expireTime,
      hits: 0,
      ...(once ? { once: true } : {}),
      ...(password ? { password } : {}),
      ...(adminPass ? { adminpass: adminPass } : {})
    };

    const createResp = await fetch(dbUrl, {
      method: "PUT",
      body: JSON.stringify(data),
      headers: { "Content-Type": "application/json" }
    });

    if (!createResp.ok) throw new Error("Failed to create entry in database.");

    return new Response(
      JSON.stringify({
        path,
        redirectPath,
        expires: expireTime,
        once,
        password: password || null,
        adminpass: adminPass || null,
        message: `Successfully created shortlink \"${path}\" → \"${redirectPath}\" (expires ${expireTime}).`
      }),
      { status: 201, headers: { "Content-Type": "application/json" } }
    );
  } catch (error) {
    console.error("Error:", error);
    return new Response(
      JSON.stringify({
        error: "Internal Server Error",
        message: error.message
      }),
      { status: 500, headers: { "Content-Type": "application/json" } }
    );
  }
};
